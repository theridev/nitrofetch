#!/bin/bash


# oooo   oooo ooooo ooooooooooo oooooooooo      
#  8888o  88   888  88  888  88  888    888     
#  88 888o88   888      888      888oooo88      
#  88   8888   888      888      888  88o       
# o88o    88  o888o    o888o    o888o  88o8     
                                              
#   ooooooo  ooooooooooo ooooooooooo ooooooooooo
# o888   888o 888    88   888    88  88  888  88
# 888     888 888ooo8     888ooo8        888    
# 888o   o888 888         888    oo      888    
#   88ooo88  o888o       o888ooo8888    o888o   
                                              
#   oooooooo8 ooooo ooooo                       
# o888     88  888   888                        
# 888          888ooo888                        
# 888o     oo  888   888                        
#  888oooo88  o888o o888o                       
#
#
# Developed by theridev
# "My back hurts, should've coded this in a more comfortable position"
# - The author himself
# << 28.09.2024 >>
#

# char used for colors
CHAR=●

# define colors
RESTORE='\033[0m'
RED='\033[00;31m'
GREEN='\033[00;32m'
BLUE='\033[00;34m'
CYAN='\033[00;36m'
PURPLE='\033[00;35m'
YELLOW='\033[00;33m'

LIGHTGRAY='\033[00;37m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
LYELLOW='\033[01;33m'
LBLUE='\033[01;34m'
LPURPLE='\033[01;35m'
LCYAN='\033[01;36m'
WHITE='\033[01;37m'

HBLACK='\e[1;90m'
HRED='\e[1;91m'
HGREEN='\e[1;92m'
HYELLOW='\e[1;93m'
HBLUE='\e[1;94m'
HPURPLE='\e[1;95m'
HCYAN='\e[1;96m'
HWHITE='\e[1;97m'

# Get username, hostname to display on the top
user=$(whoami)
hostname=$(hostnamectl --static)
hostnameuser="$user@$hostname"

# return which command should be used to check all the installed packages
function return_package_manager_command() {
  # get the OS name
  name=$(awk -F= '/^PRETTY_NAME/ { gsub(/"/, "", $2); print $2 }' /etc/os-release | tr '[:upper:]' '[:lower:]')

  if [[ $name == *"ubuntu"* || $name == *"pop"* || $name == *"tails"* || $name == *"zorin"* || $name == *"debian"* || $name == *"mint"* || $name == *"deepin"* || $name == *"kali"* ]]; then
    echo "apt list --installed | wc --lines"
  elif [[ $name == *"fedora"* || $name == *"red hat"* || $name == *"oracle"* || $name == *"rocky"* ]]; then
    echo "dnf list installed | wc --lines"
  elif [[ $name == *"artix"* || $name == *"endeavour"* || $name == *"steam"* || $name == *"arch"* || $name == *"manjaro"* ]]; then
    echo "pacman -Q | wc --lines"
  else
    echo "Unsupported distribution" # oops
  fi
}

# output disk space
disk_output() {
    local total=$(df / | awk 'NR==2 {print $2}')
    local used=$(df / | awk 'NR==2 {print $3}')
    local free=$(df / | awk 'NR==2 {print $4}')
    
    # failed to fetch disk space info :c
    if [[ -z "$total" || -z "$free" ]]; then
        print_centered "$HRED ERROR: $RESTORE" "Unable to fetch disk info!"
        return
    fi
    
    local freediskpercantage=$(awk -v total="$total" -v used="$used" 'BEGIN {print (100/total * used)}')
    local percentage=$(echo $freediskpercantage | awk '{print int($1 + 0.5)}')

    local bar_length=40   # length of the progress bar, do I have to explain?
    local filled_length=$((percentage * bar_length / 100))
    local empty_length=$((bar_length - filled_length))

    # create the filled (###) and empty (---) parts of the progress bar
    local filled_bar=$(printf "%${filled_length}s" | tr ' ' '#')
    local empty_bar=$(printf "%${empty_length}s" | tr ' ' '-')

    # display the progress bar :3
    print_centered "$LPURPLE DISK: $RESTORE" "$used / $total [$filled_bar$empty_bar] ${percentage}%"
}

# output RAM
ram_output() {
    local totalRAM=$(grep -E 'MemTotal' /proc/meminfo | awk '{print $2}')
    local freeRAM=$(grep -E 'MemAvailable' /proc/meminfo | awk '{print $2}')
    
    # failed to fetch RAM info :c
    if [[ -z "$totalRAM" || -z "$freeRAM" ]]; then
        print_centered "$HRED ERROR: $RESTORE" "Unable to fetch RAM info!"
        return
    fi
    
    # total RAM - free RAM = used RAM!
    local usedRAM=$((totalRAM - freeRAM))
    local RAMPercantage=$(awk -v total="$totalRAM" -v used="$usedRAM" 'BEGIN {print (100/total * used)}')
    local percentage=$(echo $RAMPercantage | awk '{print int($1 + 0.5)}')

    local bar_length=40   # length of the progress bar, do I have to explain?
    local filled_length=$((percentage * bar_length / 100))
    local empty_length=$((bar_length - filled_length))

    # create the filled (###) and empty (---) parts of the progress bar
    local filled_bar=$(printf "%${filled_length}s" | tr ' ' '#')
    local empty_bar=$(printf "%${empty_length}s" | tr ' ' '-')

    # display the progress bar :3
    print_centered "$LCYAN RAM: $RESTORE" "$usedRAM / $totalRAM [$filled_bar$empty_bar] ${percentage}%"
}

# i don't know
stripped_length() {
  local stripped=$(echo -e "$1" | sed 's/\x1B\[[0-9;]*[JKmsu]//g')  # remove ANSI escape sequences
  echo "${#stripped}"
}

# probably the most commonly used function... to print text in the center of terminal.
print_centered() {
  local left_part="$1"  # this is in color
  local right_part="$2" # this is not in color
  
  local term_width=$(tput cols)  # get terminal width
  local left_str_length=$(stripped_length "$left_part")  # get the length of the colored part 
  local right_str_length="${#right_part}"  # length of the completely normal part
  local total_length=$((left_str_length + right_str_length))  # length of both!

  if [[ $total_length -ge $term_width ]]; then
    echo -e "$left_part$right_part"
  else
    local padding=$(( (term_width - total_length) / 2 )) # calculations :3
    printf "%${padding}s"  # print padding for the right part
    echo -e "$left_part$right_part"  # print both parts
  fi
}

# main function, gets executed when there are no args
nitrofetch() {
  # print decoration
  echo -e "$HRED"
  print_centered "┏━━━━ ▀▄▀▄ ━━━━┓"
  echo -e "$RESTORE"

  # print hostname and user next to each other, seperated by "@"
  tput bold
  print_centered "" "$hostnameuser"
  tput sgr0

  # another decoration
  echo -e "$HRED"
  print_centered "┗━━━━ ▄▀▄▀ ━━━━┛"
  echo -e "$RESTORE"

  # get architecture and OS name, connect them together, seperated.
  arch=$(uname -m)
  name=$(awk -F= '/^PRETTY_NAME/ { gsub(/"/, "", $2); print $2 }' /etc/os-release)
  os="$name $arch"

  # get device name, kernel version, and uptime (why is getting uptime so complicated?)
  device=$(cat /sys/devices/virtual/dmi/id/product_family)
  kernel=$(uname -r)
  uptime=$(uptime | sed -E 's/^[^,]*up *//; s/, *[[:digit:]]* users.*//; s/min/minutes/; s/([[:digit:]]+):0?([[:digit:]]+)/\1 hours, \2 minutes/')

  # get how many packages does the built-in package manager has installed
  builtinPackages=$(return_package_manager_command)

  # did return_package_manager_command return something?
  if [[ $builtinPackages == "Unsupported distribution" ]]; then
    print_centered "$HRED ERROR: $RESTORE" "Distribution package manager not found!"
  else
    package_count=$(eval $builtinPackages)  # get the package count
  fi

  packageManagerName=${builtinPackages%% *}

  # check if flatpak is installed, if so, get the package count.
  if command -v flatpak 2>&1 >/dev/null; then
    flatpakOutput=$(flatpak list --columns=application | wc --lines)
    flatpakPackages=$(($flatpakOutput-1))
    flatpakTotal=", $flatpakPackages (Flatpak)"
  else
    flatpakPackages="0"
    flatpakTotal=""
  fi

  # check if snap is installed, if so, get the package count.
  if command -v snap 2>&1 >/dev/null; then
    snapPackages=$(ls -1 /var/lib/snapd/snaps | wc --lines)
    snapTotal=", $snapPackages (Snap)"
    snapPackages="0"
  else
    snapTotal=""
  fi

  # get the current desktop env, window manager, combine them both, shell type,
  # terminal emulator, CPU model, GPU model and resolution (that one was painful) 
  desktopEnv=$(printenv XDG_CURRENT_DESKTOP)
  windowMgr=$(printenv XDG_SESSION_TYPE)
  DEWM="$desktopEnv / $windowMgr"
  shellType=$(echo ${SHELL##*/})
  terminalEmulator=$(ps -o comm= -p "$(($(ps -o ppid= -p "$(($(ps -o sid= -p "$$")))")))")
  CPUType=$(lscpu | grep -E 'Model name' | awk -F': +' '{print $2}')
  GPUType=$(lspci | grep -E 'VGA|3D' | awk -F'[][]' '{print $2}')
  resolution=$(cat /sys/class/drm/*/modes)

  # print 'em all! and centered!
  print_centered "$LRED OS: $RESTORE" "$os"
  print_centered "$LCYAN HOST: $RESTORE" "$device"
  print_centered "$LYELLOW KERNEL: $RESTORE" "$kernel"
  print_centered "$HYELLOW UPTIME: $RESTORE" "$uptime"
  print_centered "$HPURPLE SHELL: $RESTORE" "$shellType"
  print_centered "$LGREEN PACKAGES: $RESTORE" "$package_count ($packageManagerName)$flatpakTotal$snapTotal"
  print_centered "$HGREEN TERMINAL: $RESTORE" "$terminalEmulator"
  print_centered "$HCYAN DE/WM: $RESTORE" "$DEWM"
  ram_output # that one needs a whole function, but im proud of it
  disk_output # copied from ram_output. do you have a problem?
  print_centered "$HRED CPU: $RESTORE" "$CPUType"
  print_centered "$HYELLOW GPU: $RESTORE" "$GPUType"
  print_centered "$HCYAN RESOLUTION: $RESTORE" "$resolution"

  # print colors, its not that scary
  print_centered "$RED$CHAR$GREEN$CHAR$BLUE$CHAR$CYAN$CHAR$PURPLE$CHAR$YELLOW$CHAR$HBLACK$CHAR$HRED$CHAR$HGREEN$CHAR$HYELLOW$SHAR$HBLUE$CHAR$HPURPLE$CHAR$HCYAN$CHAR$HWHITE$CHAR$RESTORE"

  echo #new line, because funny
}

help() {
  # this is so terribly formatted its hard to edit it. lol.
  printf "\n${HCYAN}nitrofetch${RESTORE}: nitrofetch [] [help...]\n    A fetch command humanity deserves.\n\n    ${LCYAN}DEFAULT:${RESTORE}\n      Display the default nitrofetch command.\n\n    ${LCYAN}Options:${RESTORE}\n      --char <char>                Replace the default color char (●)\n      --no-colors                  Do not use any colors. \n      --use-one-color <color>      Display nitrofetch using only one color\n      --version                    Display a more basic version command.\n\n    ${LCYAN}Commands:${RESTORE}\n      HELP      Display this command.\n      VERSION   Display information about nitrofetch.\n      UPDATE    Update nitrofetch to the latest version.\n      GET-RAM   A fancy command to display RAM usage.\n      GET-DISK  A fancy command to display disk space usage.\n\n    ${LCYAN}Exit Status:${RESTORE}\n      Returns success unless a command does not exist.\n\n"
}

# updates nitrofetch
update() {
  update=$(curl -s "https://raw.githubusercontent.com/theridev/nitrofetch/refs/heads/main/nitrofetch" || die "Connection error")
	update="$(printf '%s\n' "$update" | diff -u "$(which nitrofetch)" -)"
	if [ -z "$update" ]; then echo -e "$LGREEN>>$RESTORE Nitrofetch is up to date!"
	else
		if printf '%s\n' "$update" | sudo patch "$(which nitrofetch)" -; then
      echo -e "$LGREEN>>$RESTORE Nitrofetch has been updated!\n"
    
		else
			print_centered "${HRED}An error occured.${RESTORE}" "\n"
		fi
	fi
	exit 0
}

version() {
  # this is so terribly formatted its hard to edit it. lol.
  printf "\n    |\__/,|   (  \n  _.|o o  |_   ) )\n-(((---(((--------\n♥$LRED Nitrofetch v1.2\n$RESTORE♥ Developed by ${CYAN}theridev$RESTORE (https://github.com/theridev)\nA fetch command humanity deserves.\n\n"
}

if [ $# -eq 0 ]; then
  nitrofetch # a fetch command humanity deserves
elif [ "$1" = "help" ]; then
  help # a help command. useless.
elif [ "$1" = "version" ]; then
  version # this actually looks sick
elif [ "$1" = "update" ]; then
  update # silly update script :3
elif [ "$1" = "get-disk" ]; then
  disk_output # a fancy command for checking disk space
elif [ "$1" = "get-ram" ]; then
  ram_output # a fancy command for checking RAM usage
elif [[ "$*" == *"--no-colors"* ]]; then
  for currentvar in CHAR RESTORE RED GREEN BLUE CYAN PURPLE YELLOW LIGHTGRAY LRED LGREEN LYELLOW LBLUE LPURPLE LCYAN WHITE  HBLACK HRED HGREEN HYELLOW HBLUE HPURPLE HCYAN HWITE; do
    eval "$currentvar=" # make all of the color strings a blank string.
  done
  nitrofetch
elif [[ "$*" == *"--char"* ]]; then
  # check the argument after "--char". Maybe its not a correct way.
  for ((i=1; i<=$#; i++)); do
    if [ "${!i}" = "--char" ]; then
      next_arg_index=$((i+1))
      next_arg=${!next_arg_index}
      if [ -n "$next_arg" ]; then
          eval "CHAR='$next_arg'"
      fi # if no arg was provided, use the default char
      break
    fi
  done

  nitrofetch
elif [[ "$*" == *"--use-one-color"* ]]; then
  # check the argument after "--use-one-color"
  for ((i=1; i<=$#; i++)); do
    if [ "${!i}" = "--use-one-color" ]; then
      next_arg_index=$((i+1))
      next_arg=${!next_arg_index}
      if [ -n "$next_arg" ]; then
          # convert the color argument to uppercase. Ex: "RED" and "red" will work.
          color=${next_arg^^}

          # validate the color variable
          if [[ ! -v $color ]]; then
              print_centered "$HRED ERROR: $RESTORE" "Invalid color specified: $next_arg"
              exit 1
          fi

          # loop through all color variables and assign them the value of the selected color
          for currentvar in CHAR RESTORE RED GREEN BLUE CYAN PURPLE YELLOW LIGHTGRAY LRED LGREEN LYELLOW LBLUE LPURPLE LCYAN WHITE HBLACK HRED HGREEN HYELLOW HBLUE HPURPLE HCYAN HWITE; do
            eval "$currentvar=\"\${$color}\""  # assign the value of the specified color to all variables
          done
      else
          print_centered "$HRED ERROR: $RESTORE" "No color specified for --use-one-color!"
          exit 1
      fi
      else
      nitrofetch # call nitrofetch to display the output with the new colors
      break
    fi
  done

  elif [[ "$*" == *"--version"* ]]; then
    echo "Nitrofetch v1.2" # A more basic and less fancy version command.

else
  print_centered "$HRED ERROR: $RESTORE" "unknown command!"
fi

# I hope you enjoyed reading my commands. I didn't have fun writing them.
# I dedicate this project to my friend heigarur, i wouldn't live long enough to
# write that project without his support.
# I know he will never read it, but I appreciate his support so much <3

# -------------
# Version logs!
# -------------

# Version 1.1
# "editing the help command is painful."
# - The author himself
# << 29.09.2024 >>

# Version 1.2
# "I'm starting to find a connection between this project and my declining mental health"
# - The author himself
# << 02.10.2024 >>